// Test generated by RoostGPT for test java-rest using AI Model gpt

package payroll;

import static org.mockito.BDDMockito.given;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.assertThat;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;

import payroll.Employee;
import payroll.EmployeeController;
import payroll.EmployeeRepository;

@RunWith(MockitoJUnitRunner.class)
public class EmployeeController_all7d65934725Test {

    @InjectMocks
    private EmployeeController employeeController;

    @Mock
    private EmployeeRepository employeeRepository;

    private Employee employee1;
    private Employee employee2;

    @Before
    public void setUp() {
        employee1 = new Employee("John Doe", "developer");
        employee2 = new Employee("Jane Doe", "tester");
    }

    @Test
    public void testAll_withEmployees() {
        // given
        given(employeeRepository.findAll()).willReturn(Arrays.asList(employee1, employee2));

        // when
        CollectionModel<EntityModel<Employee>> result = employeeController.all();

        // then
        List<EntityModel<Employee>> employees = result.getContent().stream().collect(Collectors.toList());
        assertThat(employees, hasSize(2));
        assertThat(employees.get(0).getContent(), is(employee1));
        assertThat(employees.get(1).getContent(), is(employee2));
    }

    @Test
    public void testAll_noEmployees() {
        // given
        given(employeeRepository.findAll()).willReturn(Arrays.asList());

        // when
        CollectionModel<EntityModel<Employee>> result = employeeController.all();

        // then
        List<EntityModel<Employee>> employees = result.getContent().stream().collect(Collectors.toList());
        assertThat(employees, hasSize(0));
    }
}
